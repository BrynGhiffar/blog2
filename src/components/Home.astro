---
import ExperienceItem from "./ExperienceItem";
import InktorImage from "@/assets/inktor-portofolio2.png";
import MinilinksImage from "@/assets/minilinks_showcase.webp";
import ChatbyteImage from "@/assets/chatbyte_app.webp";
import { FaGithub, FaLinkedin, FaFileDownload } from "react-icons/fa";
import ProjectCard from "@/components/ProjectCard.astro";
import TechStack from "@/components/TechStack";
import { getCollection } from 'astro:content';
import moment from "moment";

const blogs = (await getCollection('blogs')).sort((a, b) => {
	if (a.data.date > b.data.date) {
		return -1
	} else if (a.data.date < b.data.date) {
		return 1;
	} else {
		return 0;
	}
});
---

<script>
  const getElementBeforePosition = (elem: HTMLElement) => {
    const rect = elem.getBoundingClientRect();
    const beforeStyle = window.getComputedStyle(elem, "::before");
    const beforeTop = rect.top + parseInt(beforeStyle.top || "0");
    const beforeLeft = rect.left + parseInt(beforeStyle.left || "0");
    const beforeHeight = parseInt(beforeStyle.height || "0");
    const beforeWidth = parseInt(beforeStyle.width || "0");

    return {
      x: beforeLeft + beforeWidth / 2,
      y: beforeTop + beforeHeight / 2,
    };
  };

  const adjustTimelineLine = () => {
    const yScroll = window.scrollY || window.pageYOffset;
    const bullets = document.getElementsByClassName("bullet");
    const firstBullet = bullets[0] as HTMLElement;
    const firstPosition = getElementBeforePosition(firstBullet);
    const lastBullet = bullets[bullets.length - 1] as HTMLElement;
    const lastPosition = getElementBeforePosition(lastBullet);
    const height = Math.abs(firstPosition.y - lastPosition.y);
    const bulletLine = document.getElementsByClassName(
      "bullet-line"
    )[0] as HTMLElement;
    Object.assign(bulletLine.style, {
      top: `${yScroll + firstPosition.y}px`,
      left: `${firstPosition.x}px`,
      height: `${height}px`,
    });
  };

  adjustTimelineLine();

  const experiencesList = document.querySelector("#experiences") as HTMLElement;

  const resizeObserver = new ResizeObserver((entries) => {
    adjustTimelineLine();
  });

  resizeObserver.observe(experiencesList);
</script>

<div class="flex flex-col gap-0.5">
  <h1 class="text-5xl font-bold">Bryn Ghiffar</h1>
  <h2 class="text-2xl italic">Software Engineer</h2>
  <div class="flex gap-2">
    <a
      target="_blank"
      href="https://github.com/BrynGhiffar"
      class="hover:bg-white hover:text-black transition-all ease-in-out pointer p-1 rounded-md"
    >
      <FaGithub size={32} />
    </a>
    <a
      target="_blank"
      href="https://www.linkedin.com/in/brynghiffar/"
      class="hover:bg-white hover:text-black transition-all ease-in-out pointer p-1 rounded-md"
    >
      <FaLinkedin size={32} />
    </a>
    <a
      target="_blank"
      href="/resume.pdf"
      class="hover:bg-white hover:text-black transition-all ease-in-out pointer p-1 rounded-md flex items-center font-inter gap-1 text-lg font-bold"
    >
      <FaFileDownload size={28} className="inline" /> CV
    </a>
  </div>
</div>
<div class="flex flex-col gap-1">
  <h3 class="text-3xl font-bold pb-2">Experience</h3>
  <hr class="pb-5" />
  <div class="bullet-line absolute border-l-[1px]"></div>
  <ul class="px-7 grid gap-2 ease-in-out transition-all" id="experiences">
    <ExperienceItem
      name="Bitwyre"
      duration="May 2024 - now"
      shortSummary="Crypto Exchange Startup"
      tech={["rust", "c++", "python", "mysql"]}
      client:load
    >
      As part of Bitwyre's <span class="underline-offset-2 underline">core trading engine</span> team, I have:
      <ul class="list-disc pl-7">
        <li>
          Led rewrite of Bitwyre's core trading engine from C++ to Rust. Improving processing speed, memory usage and stability.
        </li>
        <li>
          Fixed critical production issues in the core trading engines.
        </li>
      </ul>
    </ExperienceItem>
    <ExperienceItem
      name="Geodwipa Teknika Nusantara"
      duration="(9 mo) April 2023 - Dec 2023"
      shortSummary="Oil & Gas Company Consultant"
      tech={[
        "nextjs",
        "typescript",
        "python",
        "golang",
        "rabbitmq",
        "postgres",
      ]}
      client:load
    >
      As a <span class="underline-offset-2 underline">Full-Stack Engineer</span> at Geodwipa, I have:
      <ul class="list-disc pl-7">
        <li>
          Improved responsiveness of a service that processes seismic data using a task queue.
        </li>
        <li>
          Used docker swarm to implement automatic restarts in the event of a failed container. Health checks are implemented using simple REST API health checks.
        </li>
        <li>
          Responsible for setting up and managing team development database and services using AWS EC2’s
        </li>
      </ul>
    </ExperienceItem>
    <ExperienceItem
      name="Akseleran"
      duration="(7 mo) Feb 2023 - Aug 2023"
      shortSummary="P2P Lending Startup"
      tech={["swift"]}
      client:load
    >
      As a <span class="underline-offset-2 underline">iOS Engineer</span> at Akseleran, I have:
      <ul class="list-disc pl-7">
        <li>
          Migrate Akseleran’s IOS app features from Objective-C to Swift.
        </li>
        <li>
          Wrote unit testing to improve testing coverage & logging to improve time to solve production issues.
        </li>
        <li>
          Reduce application size by 10MB by compressing image assets.
        </li>
      </ul>
    </ExperienceItem>
    <ExperienceItem
      name="Pegipegi"
      duration="(12 mo) Feb 2022 - Jan 2023"
      shortSummary="Online Travel Agent Startup"
      tech={["java", "spring", "mongodb"]}
      client:load
    >
      As a <span class="underline-offset-2 underline">Backend Engineer</span> at Pegipegi, I have:
      <ul class="list-disc pl-7">
        <li>
          Implement an automated refund service. This feature reduced the time to obtain some refund requests from hours or days to minutes.
        </li>
        <li>
          Initiate the rewrite of Pegipegi’s flight schedule change notification service. This reduced the number of errors andunhandled exceptions in the service, which prevented flight schedule change notifications from being sent to users.
        </li>
      </ul>
    </ExperienceItem>
  </ul>
</div>
<div class="flex flex-col gap-0.5">
  <h3 class="text-3xl font-bold pb-2">Personal Projects</h3>
  <hr class="pb-5" />
  <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
    <ProjectCard
      image={InktorImage}
      imageAlt="image of inktor"
      name="Inktor"
      tech={["rust", "react", "typescript", "wasm", "webrtc"]}
      githubLink="https://github.com/BrynGhiffar/inktor-fe"
      liveLink="https://inktor.bghiffar.com"
    />
    <ProjectCard
      image={ChatbyteImage}
      imageAlt="image of chatbyte"
      name="ChatByte"
      tech={["rust", "react", "typescript"]}
      githubLink="https://github.com/BrynGhiffar/chatbyte-fe"
      liveLink="https://chatbyte.bghiffar.com"
    />
    <ProjectCard
      image={MinilinksImage}
      imageAlt="image of minilinks"
      name="Minilinks"
      tech={["golang", "react", "typescript"]}
      githubLink="https://github.com/BrynGhiffar/urlshortener-be"
      liveLink="https://minilinks.bghiffar.com"
    />
  </div>
</div>
<div class="flex flex-col gap-0.5">
  <h3 class="text-3xl font-bold pb-2">Blogs</h3>
  <hr class="pb-5" />
  <div class="flex flex-col gap-2">
    {
      blogs.map((blog) => (
        <a
          href={`/blog/${blog.id}`}
          class="group p-1 px-2 rounded-md hover:bg-white hover:text-black cursor-pointer ease-in-out transition-all"
        >
          <h4 class="text-2xl font-bold">{blog.data.title}</h4>
          <p class="text-sm pb-3">{moment(blog.data.date).format("DD-MM-YYYY")}</p>
          <TechStack tech={blog.data.tech} />
          <p>{blog.data.description}</p>
        </a>
      ))
    }
  </div>
</div>
